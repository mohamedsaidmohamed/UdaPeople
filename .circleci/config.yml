version: 2.1
orbs: 
  slack: circleci/slack@4.10.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowID: 
        type: string 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
           aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflowID >>
           aws s3 rm s3://udapeople-<< parameters.workflowID >> --recursive
           aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflowID >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflowID: 
        type: string   
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = $(curl --insecure https://kvdb.io/4Vw68uyzQDwcfwfK1R1T4V/migration_<< parameters.workflowID >>)
            if(( $SUCCESS==1 )); 
            then
                cd ~/project/backend
                npm install
                npn run migration:revert
            fi

  install_awscli:
    description: Install AWS CLI 
    steps:  
      - run: 
          name: Install AWS CLI 
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update 
            sudo apt install software-properties-common
            sudo add-apt-repository --yes  ppa:ansible/ansible
            sudo apt install ansible -y

  install_nodejs:
    description: Install node.js
    steps:
      - run:
          name: Install node.js
          command: |
            curl -fsSL https://deb.nodesource.com/setup_10.x |  sudo -E bash -
            sudo apt install -y nodejs

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            frontend-build
      
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm run test
      
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            backend-build
      
      - run:
          name: back-end test
          command: |
            cd backend
            npm install
            npm run test
      
  scan-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys:
              frontend-build
        - run:
            name: front-end acan
            command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical

  scan-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys:
              backend-build
        - run:
            name: back-end acan
            command: |
              cd backend
              npm install
              npm install --save-dev webpack@5.73.0
              npm audit fix --audit-level=critical --force
              npm update mkdirp --depth
              npm audit --audit-level=critical
        - slack/notify:
            channel: practises
            event: fail
            template: basic_fail_1
 
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: yum -y install tar gzip
          command: |
            yum -y install tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"  \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"    
              #exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
          # exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
           # exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
  
  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["e1:17:23:00:49:1e:16:38:4b:02:4b:7e:ec:2e:71:97"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            
          #exit 1
      # Here's where you will add some code to rollback on failure      
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
           # exit 1
      - run:
          name: Send migration results to Kvdb
          command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                curl --insecure https://kvdb.io/4Vw68uyzQDwcfwfK1R1T4V/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys:
            frontend-build
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
              export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text )
              export API_URL="http://${BACKEND_IP}:3030"
              echo "API_URL = ${API_URL}"
              echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
              cat frontend/.env 
      - run:
          name: Deploy frontend objects
          command: |
              cd frontend
              npm run build 
              aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}  --recursive

      
      # Here's where you will add some code to rollback on failure     
 
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: ["e1:17:23:00:49:1e:16:38:4b:02:4b:7e:ec:2e:71:97"]
      - attach_workspace:
          at: ~/  
      - restore_cache:
          keys: backend-build
      - run:
          name: Install dependencies
          command: |
              cd backend
              npm install
      - run:
          name: Ansible to copy the files.
          command: |
              cd backend
              npm run build
              tar -czf artifact.tar.gz  dist/* package*
              dir
              cd ..
              cp backend/artifact.tar.gz  .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
              export TYPEORM_MIGRATIONS_DIR=./migrations
              export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
              export TYPEORM_MIGRATIONS=./migrations/*.ts

              cd .circleci/ansible
              cat inventory.txt
              ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}   

  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install curl
      - run:
          name: Backend smoke test.
          command: |
              export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text )
            
              export API_URL="http://${BACKEND_IP}:3030"
              if curl -s ${API_URL}/api/status | grep "ok"
              then 
                exist 0
              else 
                exist 1
              fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_WWEB="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com"
             if curl -s $FRONTEND_WWEB | grep "Welcome"
              then 
                exist 1
              else 
                exist 1
              fi
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7} 

  
workflows:
  default:
    jobs:
      - build-frontend  
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      #     context: Slack
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          requires: [build-frontend,build-backend]
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]